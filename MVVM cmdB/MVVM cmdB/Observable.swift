//
//  Observable.swift
//  MVVM cmdB
//
//  Created by Сергей Сырбу on 02.02.2024.
//

import Foundation

final class Observable<T> {
// приходят пользователи, которые хранятся в массиве - каждый раз когда массив изменяется, вьюконтроллер должен знать об этом - у него есть слушатель, который говорит ему, что значения изменились - выполни инстукции которые у тебя прописаны
    var value: T? {
        didSet {//каждый раз когда будем обновлять значение value будет срабатывать дидСет и будем передавать значения именно по тому адресу, который хранится в лисенере
            DispatchQueue.main.async {
                self.listener?(self.value) //лисенер, который находится внутри класса передаем ему значение value
            }
        }
    } //следим за изменениями этого значения
    
    init(value: T?) {
        self.value = value
    }
    
    private var listener: ((T?)-> Void)?
    
     func bind (_ listener: @escaping ((T?)-> Void)) {// должен захватывать значение value, так как именно его изменение нас интересует
         listener(value) //осуществляет захват значения
         self.listener = listener // делаем связь, записываем адрес того значения, которое будет изменяться
    } //   происходит связка или взаимодействие объектов,  устанавливаем слушателя, кто то должен следить за обновлениями и если вдруг что то поменялось то мы должны говорить второму объекту - данные изменились, сделай инструкции в связи с этими изменениями
}
